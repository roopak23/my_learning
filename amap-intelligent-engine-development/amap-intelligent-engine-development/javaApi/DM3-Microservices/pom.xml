<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.acn.dm</groupId>
	<artifactId>data-monetization</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<description />

	<properties>
		<java.version>17</java.version>
		<liquibase-maven-plugin.version>4.23.0</liquibase-maven-plugin.version>
		<commons.project-info.version>2.9</commons.project-info.version>
		<pass>no-pass-input</pass>
		<skip.dbDoc>false</skip.dbDoc>
		<skip.update>true</skip.update>
		<spring.liquibase.enabled>false</spring.liquibase.enabled>
		<databaseChangeLogLockTableName>databasechangeloglock</databaseChangeLogLockTableName>
		<databaseChangeLogTableName>databasechangelog</databaseChangeLogTableName>
		<skip-process-docs>false</skip-process-docs>
		<skip.collect>false</skip.collect>
		<collect-jars-in>target\deliverables\micro-services</collect-jars-in>
		<collect-helm-in>target\deliverables\k8s</collect-helm-in>
		<collect-docs-in>target\deliverables\docs</collect-docs-in>
		<maven-antrun-plugin.version>1.7</maven-antrun-plugin.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.boot.version>3.1.1</spring.boot.version>
		<um-common-version>1.0</um-common-version>
		<maven.compiler.target>17</maven.compiler.target>
		<maven.compiler.source>17</maven.compiler.source>
		<spring-cloud-dependencies.version>2022.0.3</spring-cloud-dependencies.version>
		<spring-banner-plugin.version>1.5.2</spring-banner-plugin.version>
		<springdoc.version>1.7.0</springdoc.version>
		<org.mapstruct.version>1.5.5.Final</org.mapstruct.version>
		<lombok.version>1.18.20</lombok.version>
		<maven-compile-plugin.version>3.11.0</maven-compile-plugin.version>
		<hibernate.version>6.2.6.Final</hibernate.version>
		<spring-security-jwt.version>1.1.0.RELEASE</spring-security-jwt.version>
		<swagger2markup.version>1.3.4</swagger2markup.version>
		<liquibase.changelog>src/main/resources/db/changelog/master.xml</liquibase.changelog>
		<host>127.0.0.1</host>
		<port>3306</port>
		<user>root</user>
		<liquibase.skip>false</liquibase.skip>
		<swagger-maven-plugin.version>3.1.8</swagger-maven-plugin.version>
		<dependency.locations.enabled>false</dependency.locations.enabled>
		<cucumber.version>7.2.3</cucumber.version>
		<karate.version>0.9.6</karate.version>
		<guava.version>32.1.1-jre</guava.version>
		<property-profile>local</property-profile>
		<deploy-with>docker</deploy-with>
		<jacoco.version>0.8.10</jacoco.version>
		<jacoco.file>${project.build.directory}/coverage-reports/jacoco-unit.exec</jacoco.file>
		<jacoco.minimum.coverage>0</jacoco.minimum.coverage>
		<keycloak-url-for-swagger>http://127.0.0.1:8080</keycloak-url-for-swagger>
		<jackson.version>2.13.2</jackson.version>
		<jackson.databind.version>2.13.2.2</jackson.databind.version>

	</properties>

	<name>DM3 SA Integration</name>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>jakarta.persistence</groupId>
				<artifactId>jakarta.persistence-api</artifactId>
				<version>3.1.0</version>
			</dependency>

			<dependency>
				<groupId>jakarta.servlet</groupId>
				<artifactId>jakarta.servlet-api</artifactId>
				<version>6.0.0</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.databind.version}</version>
			</dependency>

			<dependency>
				<groupId>com.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>2.20.0</version>
			</dependency>

			<dependency>
				<groupId>org.mariadb.jdbc</groupId>
				<artifactId>mariadb-java-client</artifactId>
				<version>3.1.4</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-kubernetes-dependencies</artifactId>
				<version>3.0.3</version>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-kubernetes-fabric8-all</artifactId>
				<version>3.0.3</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-kubernetes-client-all</artifactId>
				<version>3.0.3</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-bootstrap</artifactId>
				<version>4.0.3</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-validation</artifactId>
				<version>3.1.1</version>
			</dependency>

			<dependency>
				<groupId>com.acn.dm</groupId>
				<artifactId>common</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>com.acn.dm</groupId>
				<artifactId>feign-commons</artifactId>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${org.mapstruct.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-config-server</artifactId>
				<version>4.0.3</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>6.0.10</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring.boot.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springdoc</groupId>
				<artifactId>springdoc-openapi-ui</artifactId>
				<version>${springdoc.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springdoc</groupId>
				<artifactId>springdoc-openapi-data-rest</artifactId>
				<version>${springdoc.version}</version>
			</dependency>

			<dependency>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>${swagger-maven-plugin.version}</version>
				<scope>compile</scope>
			</dependency>

			<dependency>
				<groupId>org.hibernate.orm</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>${hibernate.version}</version>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-java</artifactId>
				<version>${cucumber.version}</version>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-junit</artifactId>
				<version>${cucumber.version}</version>
			</dependency>

			<dependency>
				<groupId>io.cucumber</groupId>
				<artifactId>cucumber-spring</artifactId>
				<version>${cucumber.version}</version>
			</dependency>

			<dependency>
				<groupId>com.intuit.karate</groupId>
				<artifactId>karate-apache</artifactId>
				<version>${karate.version}</version>
			</dependency>

			<dependency>
				<groupId>com.intuit.karate</groupId>
				<artifactId>karate-junit5</artifactId>
				<version>${karate.version}</version>
			</dependency>

			<dependency>
				<groupId>net.masterthought</groupId>
				<artifactId>cucumber-reporting</artifactId>
				<version>5.6.1</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${spring.boot.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
				<version>${spring.boot.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
				<version>${spring.boot.version}</version>
			</dependency>

<!--			<dependency>-->
<!--				<groupId>com.acn.dm.testing</groupId>-->
<!--				<artifactId>test-commons</artifactId>-->
<!--				<version>${project.version}</version>-->
<!--			</dependency>-->
		</dependencies>

	</dependencyManagement>

	<repositories>
		<repository>
			<id>maven-central</id>
			<url>https://repo1.maven.org/maven2/</url>
			<name>Maven Central</name>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>maven-central</id>
			<url>https://repo1.maven.org/maven2/</url>
			<name>Maven Central</name>
		</pluginRepository>
		<pluginRepository>
			<id>spring-plugins</id>
			<name>Spring Plugins</name>
			<url>https://repo.spring.io/plugins-release/</url>
		</pluginRepository>

		<pluginRepository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>jcenter-releases</id>
			<name>jcenter</name>
			<url>https://jcenter.bintray.com/</url>
		</pluginRepository>

	</pluginRepositories>


	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.version}</version>
					<configuration>
						<destFile>${jacoco.file}</destFile>
						<dataFile>${jacoco.file}</dataFile>
						<outputDirectory>${project.build.directory}/coverage-reports/jacoco</outputDirectory>
					</configuration>
					<executions>
						<execution>
							<id>prepare-integration-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>check</id>
							<goals>
								<goal>check</goal>
							</goals>
							<configuration>
								<rules>
									<rule>
										<element>BUNDLE</element>
										<limits>
											<limit>
												<counter>INSTRUCTION</counter>
												<value>COVEREDRATIO</value>
												<minimum>${jacoco.minimum.coverage}</minimum>
											</limit>
										</limits>
									</rule>
								</rules>
							</configuration>
						</execution>
						<execution>
							<id>report</id>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>${commons.project-info.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.apache.bcel</groupId>
							<artifactId>bcel</artifactId>
							<version>6.2</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.boot.version}</version>
					<inherited>true</inherited>
					<configuration>
						<executable>false</executable>
						<jvmArguments>-Xmx100m</jvmArguments>
					</configuration>
					<executions>
						<execution>
							<id>repackage</id>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
						<execution>
							<id>build-info</id>
							<goals>
								<goal>build-info</goal>
							</goals>
							<configuration>
								<additionalProperties>
									<spring-cloud-dependencies.version>${spring-cloud-dependencies.version}</spring-cloud-dependencies.version>
									<spring.boot.version>${spring.boot.version}</spring.boot.version>
								</additionalProperties>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>ch.acanda.maven</groupId>
					<artifactId>spring-banner-plugin</artifactId>
					<version>${spring-banner-plugin.version}</version>
					<inherited>true</inherited>
					<executions>
						<execution>
							<id>generate-spring-banner</id>
							<phase>generate-resources</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<text>${project.name}</text>
						<outputDirectory>${project.build.outputDirectory}</outputDirectory>
						<filename>banner.txt</filename>
						<includeInfo>true</includeInfo>
						<!--suppress UnresolvedMavenProperty -->
						<info>
							Version: ${project.version}
							Server: ${server.address:}
							Port:
							${server.port:}
							Active Profiles: ${spring.profiles.active:default}
							Spring Boot: ${spring.boot.version}
							Spring Cloud:
							${spring-cloud-dependencies.version}
						</info>
						<color>default</color>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compile-plugin.version}</version>
					<inherited>true</inherited>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
						<annotationProcessorPaths>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${org.mapstruct.version}</version>
							</path>
							<path>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version>
							</path>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
								<version>${spring.boot.version}</version>
							</path>
							<path>
								<groupId>org.hibernate.orm</groupId>
								<artifactId>hibernate-jpamodelgen</artifactId>
								<version>${hibernate.version}</version>
							</path>
						</annotationProcessorPaths>
						<compilerArgs>
							<compilerArg>
								-Amapstruct.defaultComponentModel=spring
								-Amapstruct.unmappedTargetPolicy=ERROR
							</compilerArg>
						</compilerArgs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.github.kongchen</groupId>
					<artifactId>swagger-maven-plugin</artifactId>
					<version>${swagger-maven-plugin.version}</version>
					<configuration>
						<apiSources>
							<apiSource>
								<schemes>${docs.schema}</schemes>
								<basePath>${docs.basePath}</basePath>
								<host>${docs.host}</host>
								<springmvc>true</springmvc>
								<info>
									<title>${project.name} - ${project.version}</title>
									<version>${project.version}</version>
									<description>${project.description}</description>
								</info>
								<locations>${docs.controllers}</locations>
								<swaggerDirectory>${project.build.directory}</swaggerDirectory>
								<swaggerApiReader>com.github.kongchen.swagger.docgen.reader.SpringMvcApiReader</swaggerApiReader>
								<securityDefinitions>
									<securityDefinition>
										<jsonPath>${project.basedir}\..\target\swagger\security.json</jsonPath>
									</securityDefinition>
								</securityDefinitions>
							</apiSource>
						</apiSources>
					</configuration>
					<executions>
						<execution>
							<phase>prepare-package</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>io.github.swagger2markup</groupId>
					<artifactId>swagger2markup-maven-plugin</artifactId>
					<version>${swagger2markup.version}</version>
					<dependencies>
						<dependency>
							<groupId>io.github.swagger2markup</groupId>
							<artifactId>swagger2markup-import-files-ext</artifactId>
							<version>${swagger2markup.version}</version>
						</dependency>
						<dependency>
							<groupId>io.github.swagger2markup</groupId>
							<artifactId>swagger2markup-spring-restdocs-ext</artifactId>
							<version>${swagger2markup.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<skip>${swagger.skip}</skip>
						<swaggerInput>${project.build.directory}/swagger.json</swaggerInput>
						<outputDir>${project.build.directory}/docs/asciidoc/generated</outputDir>
						<config>
							<swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
							<swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
							<swagger2markup.extensions.springRestDocs.defaultSnippets>false</swagger2markup.extensions.springRestDocs.defaultSnippets>
						</config>
					</configuration>
					<executions>
						<execution>
							<phase>prepare-package</phase>
							<goals>
								<goal>convertSwagger2markup</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.asciidoctor</groupId>
					<artifactId>asciidoctor-maven-plugin</artifactId>
					<version>1.5.2</version>
					<executions>
						<execution>
							<id>output-html</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>process-asciidoc</goal>
							</goals>
							<configuration>
								<backend>html5</backend>
								<outputDirectory>${project.build.directory}/docs/html</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>output-pdf</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>process-asciidoc</goal>
							</goals>
							<configuration>
								<backend>pdf</backend>
								<outputDirectory>${project.build.directory}/docs/pdf</outputDirectory>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj-pdf</artifactId>
							<version>1.5.0-alpha.8</version>
						</dependency>
					</dependencies>
					<configuration>
						<skip>${swagger.skip}</skip>
						<sourceDirectory>../shared/docs/asciidoc</sourceDirectory>
						<sourceDocumentName>index.adoc</sourceDocumentName>
						<attributes>
							<doctype>book</doctype>
							<toc>left</toc>
							<toclevels>3</toclevels>
							<numbered></numbered>
							<hardbreaks></hardbreaks>
							<sectlinks></sectlinks>
							<sectanchors></sectanchors>
							<generated>${project.build.directory}/docs/asciidoc/generated</generated>
						</attributes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
					<inherited>true</inherited>
					<executions>
						<execution>
							<id>process-docs</id>
							<phase>prepare-package</phase>
							<inherited>true</inherited>
							<configuration>
								<skip>${swagger.skip}</skip>
								<target>

									<copy
											todir="${project.build.directory}/classes/static/docs/api"
											failonerror="false">
										<fileset dir="${project.build.directory}/docs/html" />
									</copy>

									<copy
											todir="${project.build.directory}/classes/static/docs/database"
											failonerror="false">
										<fileset
												dir="${project.build.directory}/liquibase/dbDoc" />
									</copy>

									<move file="${project.build.directory}/docs/pdf/index.pdf"
										  tofile="${project.build.directory}/docs/pdf/${project.name} Rest API.pdf"
										  failonerror="false" />

									<copy
											todir="${project.basedir}\..\${collect-docs-in}\${project.artifactId}"
											failonerror="false">
										<fileset
												dir="${project.build.directory}/classes/static/docs" />
									</copy>

									<copy
											file="${project.build.directory}/docs/pdf/${project.name} Rest API.pdf"
											tofile="${project.basedir}/../${collect-docs-in}/${project.artifactId}/${project.name} Rest API.pdf"
											failonerror="false" />

									<copy file="${project.build.directory}/swagger.json"
										  tofile="${project.basedir}/../${collect-docs-in}/${project.artifactId}/swagger.json"
										  failonerror="false" />

									<copy
											todir="${project.basedir}/../${collect-helm-in}/templates/${project.artifactId}"
											failonerror="false" includeEmptyDirs="false">
										<fileset
												dir="${project.build.directory}/helm/templates">
											<filename name="*.yaml" />
										</fileset>
										<globmapper from="*" to="${project.artifactId}-*" />
									</copy>

									<copy
											todir="${project.basedir}/../${collect-helm-in}/templates/${project.artifactId}/rbac"
											failonerror="false" includeEmptyDirs="false">
										<fileset
												dir="${project.build.directory}/helm/templates/rbac">
											<filename name="*.yaml" />
										</fileset>
										<globmapper from="*" to="${project.artifactId}-*" />
									</copy>

								</target>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
					<executions>
						<execution>
							<id>collect</id>
							<phase>install</phase>
							<inherited>true</inherited>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<skip>${skip.collect}</skip>
								<outputDirectory>${project.basedir}\..\${collect-jars-in}\${project.artifactId}</outputDirectory>
								<resources>
									<resource>
										<directory>${project.build.directory}</directory>
										<filtering>true</filtering>
										<includes>
											<include>*.jar</include>
											<include>Dockerfile</include>
											<include>healthcheck.sh</include>
										</includes>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>collect-build-info</id>
							<phase>prepare-package</phase>
							<inherited>true</inherited>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<skip>${skip.collect}</skip>
								<outputDirectory>${project.basedir}\..\${collect-jars-in}\${project.artifactId}\META-INF</outputDirectory>
								<resources>
									<resource>
										<directory>${project.build.directory}\classes\META-INF</directory>
										<filtering>false</filtering>
										<includes>
											<include>build-info.properties</include>
										</includes>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>collect-swagger-files</id>
							<phase>prepare-package</phase>
							<inherited>false</inherited>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/swagger</outputDirectory>
								<resources>
									<resource>
										<directory>shared/swagger</directory>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>

		<profile>
			<id>standalone</id>
		</profile>

		<profile>
			<id>common</id>
			<modules>
				<module>common</module>
<!--				<module>test-commons</module>-->
				<module>feign-commons</module>
			</modules>
		</profile>

		<profile>
			<id>site</id>
			<build>
				<defaultGoal>clean site</defaultGoal>
			</build>
			<modules>
				<module>api-gateway</module>
				<module>common</module>
				<module>test-commons</module>
				<module>feign-commons</module>
				<module>config-server</module>
				<module>eureka-gateway</module>
				<module>inventory-management</module>
				<module>order-management</module>
			</modules>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-project-info-reports-plugin</artifactId>
						<version>${commons.project-info.version}</version>
						<reportSets>
							<reportSet>
								<reports>
									<report>dependencies</report>
									<report>summary</report>
									<report>index</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${commons.project-info.version}</version>
						<reportSets>
							<reportSet>
								<reports>
									<report>javadoc</report>
									<report>test-javadoc</report>
								</reports>
							</reportSet>
							<reportSet>
								<id>aggregate</id>
								<inherited>false</inherited>
								<reports>
									<report>aggregate</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
				</plugins>
			</reporting>
		</profile>
		<profile>
			<id>collect-site</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<!-- here the phase you need -->
								<phase>site</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${siteout}/${project.artifactId}</outputDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}/site</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>no-liquibase-docs</id>
			<activation>
				<property>
					<name>pass</name>
					<value>no-pass-input</value>
				</property>
			</activation>
			<properties>
				<skip.dbDoc>true</skip.dbDoc>
			</properties>
		</profile>
		<profile>
			<id>deploy-scripts-helm</id>
			<activation>
				<property>
					<name>deploy-with</name>
					<value>helm</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy-helm</id>
								<phase>install</phase>
								<inherited>true</inherited>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<skip>${skip.collect}</skip>
									<outputDirectory>${collect-helm-in}</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}\shared\deploy\script\helm\base</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>deploy-scripts-docker</id>
			<activation>
				<property>
					<name>deploy-with</name>
					<value>docker</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>copy-deploy-scripts</id>
								<phase>install</phase>
								<inherited>false</inherited>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${collect-jars-in}</outputDirectory>
									<resources>
										<resource>
											<directory>shared\deploy\script\docker</directory>
											<filtering>true</filtering>
											<includes>
												<include>docker-compose.yml</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-helm</id>
								<phase>install</phase>
								<inherited>false</inherited>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<skip>${skip.collect}</skip>
									<outputDirectory>${collect-helm-in}</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}\shared\deploy\script\helm</directory>
											<filtering>true</filtering>
											<excludes>
												<exclude>helm\templates\**</exclude>
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<activation>
				<property>
					<name>prod</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<property-profile>container</property-profile>
			</properties>
		</profile>
		<profile>
			<id>deploy-with-docker</id>
			<activation>
				<property>
					<name>deploy-with</name>
					<value>docker</value>
				</property>
			</activation>
			<modules>
				<module>api-gateway</module>
				<module>common</module>
				<module>test-commons</module>
				<module>feign-commons</module>
				<module>config-server</module>
				<module>inventory-management</module>
				<module>order-management</module>
				<module>eureka-gateway</module>
			</modules>
		</profile>
		<profile>
			<id>deploy-with-helm</id>
			<activation>
				<property>
					<name>deploy-with</name>
					<value>helm</value>
				</property>
			</activation>
			<modules>
				<module>common</module>
<!--				<module>test-commons</module>-->
				<module>feign-commons</module>
				<module>inventory-management</module>
				<module>order-management</module>
			</modules>
		</profile>
		<profile>
			<id>test</id>
			<modules>
				<module>inventory-management</module>
				<module>order-management</module>
			</modules>
		</profile>
	</profiles>

</project>